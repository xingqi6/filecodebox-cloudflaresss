name: Deploy FileCodeBox to Cloudflare Workers

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:  # ÂÖÅËÆ∏ÊâãÂä®Ëß¶Âèë

env:
  # ËµÑÊ∫êÂêçÁß∞Ôºà‰ΩøÁî®È°πÁõÆ‰∏≠ÁîüÊàêÁöÑÂêçÁß∞Ôºâ
  R2_BUCKET_NAME: "filecodebox-r2-f6bd1dfe"
  R2_PREVIEW_BUCKET_NAME: "filecodebox-r2-f6bd1dfe-preview"
  KV_NAMESPACE_NAME: "filecodebox-kv-2c88c777"

jobs:
  setup-and-deploy:
    runs-on: ubuntu-latest
    name: Setup Resources and Deploy
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Install dependencies
      run: npm install

    - name: Install Wrangler
      run: npm install -g wrangler

    - name: Authenticate with Cloudflare
      run: |
        echo "Setting up Cloudflare authentication..."
        wrangler whoami
      env:
        CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
        CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}

    - name: Create R2 Buckets
      run: |
        echo "ü™£ Creating R2 buckets..."
        
        # ÂàõÂª∫‰∏ªÂ≠òÂÇ®Ê°∂
        echo "Creating main bucket: $R2_BUCKET_NAME"
        if wrangler r2 bucket create "$R2_BUCKET_NAME" 2>/dev/null; then
          echo "‚úÖ Main bucket created successfully"
        else
          echo "‚ÑπÔ∏è Main bucket might already exist, continuing..."
        fi
        
        # ÂàõÂª∫È¢ÑËßàÂ≠òÂÇ®Ê°∂
        echo "Creating preview bucket: $R2_PREVIEW_BUCKET_NAME"
        if wrangler r2 bucket create "$R2_PREVIEW_BUCKET_NAME" 2>/dev/null; then
          echo "‚úÖ Preview bucket created successfully"
        else
          echo "‚ÑπÔ∏è Preview bucket might already exist, continuing..."
        fi
      env:
        CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
        CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}

    - name: Check API Token
      id: check_token
      run: |
        if [[ -z "$CLOUDFLARE_API_TOKEN" ]]; then
          echo "‚ö†Ô∏è CLOUDFLARE_API_TOKEN environment variable not set"
          echo "has_token=false" >> $GITHUB_OUTPUT
        else
          echo "‚úÖ CLOUDFLARE_API_TOKEN found"
          echo "has_token=true" >> $GITHUB_OUTPUT
        fi
      env:
        CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}

    - name: Create KV Namespaces
      id: create_kv
      run: |
        echo "üóÑÔ∏è Creating KV namespaces..."
        
        # Ê£ÄÊü•ÊòØÂê¶Êúâ API token
        if [[ "${{ steps.check_token.outputs.has_token }}" != "true" ]]; then
          echo "‚ùå No Cloudflare API token available"
          echo "üìã To complete setup, please:"
          echo "1. Go to GitHub repository Settings > Secrets and variables > Actions"
          echo "2. Add CLOUDFLARE_API_TOKEN secret with your Cloudflare API token"
          echo "3. Add CLOUDFLARE_ACCOUNT_ID secret with your Cloudflare Account ID"
          echo "4. Re-run this workflow"
          echo ""
          echo "üîß For manual setup, use these placeholder IDs:"
          echo "kv_id=MANUAL_SETUP_REQUIRED" >> $GITHUB_OUTPUT
          echo "kv_preview_id=MANUAL_SETUP_REQUIRED" >> $GITHUB_OUTPUT
          exit 0
        fi
        
        # ÂàõÂª∫‰∏ª KV ÂëΩÂêçÁ©∫Èó¥
        echo "Creating main KV namespace: $KV_NAMESPACE_NAME"
        
        # È¶ñÂÖàÊµãËØï wrangler ËøûÊé•
        echo "Testing wrangler connection..."
        WHOAMI_OUTPUT=$(wrangler whoami 2>&1)
        WHOAMI_EXIT_CODE=$?
        echo "Whoami exit code: $WHOAMI_EXIT_CODE"
        echo "Whoami output: $WHOAMI_OUTPUT"
        
        if [[ $WHOAMI_EXIT_CODE -ne 0 ]]; then
          echo "‚ùå Wrangler authentication failed"
          echo "Please check your API token and account ID"
          exit 1
        fi
        
        # Â∞ùËØïÂàõÂª∫Êñ∞ÁöÑ KV ÂëΩÂêçÁ©∫Èó¥
        echo "Attempting to create KV namespace..."
        
        # ‰ΩøÁî®Êõ¥ËØ¶ÁªÜÁöÑËæìÂá∫ÊçïËé∑
        set +e  # ÊöÇÊó∂Á¶ÅÁî®ÈîôËØØÈÄÄÂá∫
        KV_CREATE_OUTPUT=$(wrangler kv namespace create "$KV_NAMESPACE_NAME" --verbose 2>&1)
        KV_CREATE_EXIT_CODE=$?
        set -e  # ÈáçÊñ∞ÂêØÁî®ÈîôËØØÈÄÄÂá∫
        
        echo "KV creation exit code: $KV_CREATE_EXIT_CODE"
        echo "KV creation output:"
        echo "$KV_CREATE_OUTPUT"
        
        # Â¶ÇÊûúÂàõÂª∫Â§±Ë¥•ÔºåÊòæÁ§∫Êõ¥ËØ¶ÁªÜÁöÑÈîôËØØ‰ø°ÊÅØÂíåÂèØËÉΩÁöÑËß£ÂÜ≥ÊñπÊ°à
        if [[ $KV_CREATE_EXIT_CODE -ne 0 ]]; then
          echo ""
          echo "‚ùå KV namespace creation failed with detailed error:"
          echo "Command: wrangler kv namespace create $KV_NAMESPACE_NAME --verbose"
          echo "Exit code: $KV_CREATE_EXIT_CODE"
          echo ""
          echo "üîç Error Analysis:"
          
          # ÂàÜÊûêÂ∏∏ËßÅÈîôËØØÁ±ªÂûã
          if echo "$KV_CREATE_OUTPUT" | grep -i "permission\|forbidden\|unauthorized"; then
            echo "- ‚ùå Permission Error: API token lacks required permissions"
            echo "- üí° Solution: Recreate API token with 'Cloudflare Workers:Edit' permission"
          elif echo "$KV_CREATE_OUTPUT" | grep -i "account"; then
            echo "- ‚ùå Account Error: Account ID may be required or invalid"
            echo "- üí° Solution: Set CLOUDFLARE_ACCOUNT_ID in GitHub secrets"
          elif echo "$KV_CREATE_OUTPUT" | grep -i "limit\|quota"; then
            echo "- ‚ùå Quota Error: Account has reached KV namespace limit"
            echo "- üí° Solution: Delete unused KV namespaces or upgrade plan"
          elif echo "$KV_CREATE_OUTPUT" | grep -i "network\|timeout\|connection"; then
            echo "- ‚ùå Network Error: Connection to Cloudflare API failed"
            echo "- üí° Solution: Retry the operation"
          else
            echo "- ‚ùì Unknown Error: Check full output above"
          fi
          
          echo ""
          echo "üîß Debugging Information:"
          echo "- API Token present: $([ -n "$CLOUDFLARE_API_TOKEN" ] && echo "Yes (${#CLOUDFLARE_API_TOKEN} chars)" || echo "No")"
          echo "- Account ID present: $([ -n "$CLOUDFLARE_ACCOUNT_ID" ] && echo "Yes (${#CLOUDFLARE_ACCOUNT_ID} chars)" || echo "No")"
          echo "- Wrangler version: $(wrangler --version 2>/dev/null || echo "Unknown")"
          
          echo ""
          echo "üÜò Recommended Actions:"
          echo "1. Check API token permissions at: https://dash.cloudflare.com/profile/api-tokens"
          echo "2. Ensure token has 'Cloudflare Workers:Edit' permission"
          echo "3. Add CLOUDFLARE_ACCOUNT_ID to GitHub secrets if not present"
          echo "4. Try manual setup using: ./deploy-local.sh"
        fi
        
        if [[ $KV_CREATE_EXIT_CODE -eq 0 ]]; then
          # ‰ªéÊ†áÂáÜËæìÂá∫‰∏≠ÊèêÂèñ ID (Ê†ºÂºè: id = "namespace_id")
          KV_ID=$(echo "$KV_CREATE_OUTPUT" | grep -o 'id = "[^"]*"' | sed 's/id = "\(.*\)"/\1/')
          
          if [[ -n "$KV_ID" ]]; then
            echo "‚úÖ Main KV namespace created with ID: $KV_ID"
          else
            echo "‚ö†Ô∏è Could not extract KV ID from output, checking existing namespaces..."
            # Ëé∑ÂèñÁé∞ÊúâÁöÑ KV ÂëΩÂêçÁ©∫Èó¥ÂàóË°®
            KV_LIST=$(wrangler kv namespace list --json 2>/dev/null || echo "[]")
            KV_ID=$(echo "$KV_LIST" | jq -r --arg name "$KV_NAMESPACE_NAME" '.[] | select(.title == $name) | .id' 2>/dev/null | head -1)
            
            if [[ -n "$KV_ID" && "$KV_ID" != "null" ]]; then
              echo "Found existing KV namespace ID: $KV_ID"
            else
              echo "‚ùå Could not find or create KV namespace"
              echo "Please check your Cloudflare API token permissions"
              exit 1
            fi
          fi
        else
          echo "‚ÑπÔ∏è KV namespace creation failed, checking existing namespaces..."
          
          # Ëé∑ÂèñÁé∞ÊúâÁöÑ KV ÂëΩÂêçÁ©∫Èó¥ÂàóË°®
          KV_LIST=$(wrangler kv namespace list --json 2>/dev/null || echo "[]")
          KV_ID=$(echo "$KV_LIST" | jq -r --arg name "$KV_NAMESPACE_NAME" '.[] | select(.title == $name) | .id' 2>/dev/null | head -1)
          
          if [[ -n "$KV_ID" && "$KV_ID" != "null" ]]; then
            echo "Found existing KV namespace ID: $KV_ID"
          else
            echo "‚ùå Could not find or create KV namespace"
            echo "Please check your Cloudflare API token permissions or create manually"
            exit 1
          fi
        fi
        
        # ÂàõÂª∫È¢ÑËßà KV ÂëΩÂêçÁ©∫Èó¥
        echo "Creating preview KV namespace: ${KV_NAMESPACE_NAME}-preview"
        KV_PREVIEW_CREATE_OUTPUT=$(wrangler kv namespace create "${KV_NAMESPACE_NAME}-preview" --preview 2>&1)
        KV_PREVIEW_EXIT_CODE=$?
        
        echo "Preview KV creation exit code: $KV_PREVIEW_EXIT_CODE"
        echo "Preview KV creation output: $KV_PREVIEW_CREATE_OUTPUT"
        
        if [[ $KV_PREVIEW_EXIT_CODE -eq 0 ]]; then
          # ‰ªéÊ†áÂáÜËæìÂá∫‰∏≠ÊèêÂèñÈ¢ÑËßà ID (Ê†ºÂºè: preview_id = "namespace_id")
          KV_PREVIEW_ID=$(echo "$KV_PREVIEW_CREATE_OUTPUT" | grep -o 'preview_id = "[^"]*"' | sed 's/preview_id = "\(.*\)"/\1/')
          
          if [[ -n "$KV_PREVIEW_ID" ]]; then
            echo "‚úÖ Preview KV namespace created with ID: $KV_PREVIEW_ID"
          else
            echo "‚ö†Ô∏è Could not extract preview KV ID from output, using main KV ID"
            KV_PREVIEW_ID="$KV_ID"
          fi
        else
          echo "‚ÑπÔ∏è Preview KV namespace creation failed, checking existing namespaces..."
          
          # Ëé∑ÂèñÁé∞ÊúâÁöÑÈ¢ÑËßà KV ÂëΩÂêçÁ©∫Èó¥
          KV_LIST=$(wrangler kv namespace list --json 2>/dev/null || echo "[]")
          KV_PREVIEW_ID=$(echo "$KV_LIST" | jq -r --arg name "${KV_NAMESPACE_NAME}-preview" '.[] | select(.title == $name) | .id' 2>/dev/null | head -1)
          
          if [[ -n "$KV_PREVIEW_ID" && "$KV_PREVIEW_ID" != "null" ]]; then
            echo "Found existing preview KV namespace ID: $KV_PREVIEW_ID"
          else
            echo "‚ÑπÔ∏è Could not find preview KV namespace, using main KV ID"
            KV_PREVIEW_ID="$KV_ID"
          fi
        fi
        
        # È™åËØÅ ID ‰∏ç‰∏∫Á©∫
        if [[ -z "$KV_ID" || "$KV_ID" == "null" ]]; then
          echo "‚ùå KV_ID is empty or null"
          exit 1
        fi
        
        if [[ -z "$KV_PREVIEW_ID" || "$KV_PREVIEW_ID" == "null" ]]; then
          echo "‚ùå KV_PREVIEW_ID is empty or null"
          exit 1
        fi
        
        echo "Final KV IDs - Main: $KV_ID, Preview: $KV_PREVIEW_ID"
        
        # ËæìÂá∫Âà∞ GitHub Actions
        echo "kv_id=$KV_ID" >> $GITHUB_OUTPUT
        echo "kv_preview_id=$KV_PREVIEW_ID" >> $GITHUB_OUTPUT
      env:
        CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
        CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}

    - name: Update wrangler.toml with KV IDs
      run: |
        echo "üìù Updating wrangler.toml with actual KV IDs..."
        
        KV_ID="${{ steps.create_kv.outputs.kv_id }}"
        KV_PREVIEW_ID="${{ steps.create_kv.outputs.kv_preview_id }}"
        
        echo "Using KV ID: $KV_ID"
        echo "Using KV Preview ID: $KV_PREVIEW_ID"
        
        # Ê£ÄÊü•ÊòØÂê¶ÈúÄË¶ÅÊâãÂä®ËÆæÁΩÆ
        if [[ "$KV_ID" == "MANUAL_SETUP_REQUIRED" ]]; then
          echo "‚ö†Ô∏è Manual KV setup required"
          echo "üìã Please manually create KV namespaces and update wrangler.toml:"
          echo "1. Run: npx wrangler kv namespace create filecodebox-kv-2c88c777"
          echo "2. Run: npx wrangler kv namespace create filecodebox-kv-2c88c777-preview --preview"
          echo "3. Update wrangler.toml with the returned IDs"
          echo "4. Deploy manually: npx wrangler deploy"
          
          # ÂàõÂª∫‰∏Ä‰∏™ÂåÖÂê´ËØ¥ÊòéÁöÑÊñá‰ª∂
          cat > MANUAL_SETUP_INSTRUCTIONS.md << 'EOF'
        # Manual Setup Required
        
        The automatic setup could not complete because Cloudflare API credentials are not configured.
        
        ## Steps to complete setup:
        
        ### 1. Configure GitHub Secrets (Recommended)
        Add these secrets to your GitHub repository (Settings > Secrets and variables > Actions):
        - `CLOUDFLARE_API_TOKEN`: Your Cloudflare API token
        - `CLOUDFLARE_ACCOUNT_ID`: Your Cloudflare Account ID
        
        Then re-run the GitHub Action.
        
        ### 2. Manual Setup (Alternative)
        If you prefer to set up manually:
        
        ```bash
        # Set your API token
        export CLOUDFLARE_API_TOKEN=your_token_here
        
        # Create KV namespaces
        npx wrangler kv namespace create filecodebox-kv-2c88c777
        npx wrangler kv namespace create filecodebox-kv-2c88c777-preview --preview
        
        # Update wrangler.toml with the returned IDs
        # Replace PLACEHOLDER_KV_ID and PLACEHOLDER_KV_PREVIEW_ID
        
        # Deploy
        npx wrangler deploy
        ```
        
        ## Getting Cloudflare Credentials
        
        1. **API Token**: Go to [Cloudflare API Tokens](https://developers.cloudflare.com/fundamentals/api/get-started/create-token/)
        2. **Account ID**: Found in your Cloudflare dashboard sidebar
        EOF
          
          echo "üìÑ Created MANUAL_SETUP_INSTRUCTIONS.md with detailed instructions"
          exit 0
        fi
        
        # È™åËØÅ ID ‰∏ç‰∏∫Á©∫
        if [[ -z "$KV_ID" || "$KV_ID" == "null" ]]; then
          echo "‚ùå KV_ID is empty, cannot update wrangler.toml"
          exit 1
        fi
        
        if [[ -z "$KV_PREVIEW_ID" || "$KV_PREVIEW_ID" == "null" ]]; then
          echo "‚ùå KV_PREVIEW_ID is empty, cannot update wrangler.toml"
          exit 1
        fi
        
        # ÊõøÊç¢Âç†‰ΩçÁ¨¶
        sed -i "s/PLACEHOLDER_KV_ID/$KV_ID/g" wrangler.toml
        sed -i "s/PLACEHOLDER_KV_PREVIEW_ID/$KV_PREVIEW_ID/g" wrangler.toml
        
        echo "‚úÖ wrangler.toml updated successfully"
        
        # ÊòæÁ§∫Êõ¥Êñ∞ÂêéÁöÑÈÖçÁΩÆ
        echo "Updated KV configuration:"
        grep -A 5 "kv_namespaces" wrangler.toml

    - name: Validate wrangler.toml
      run: |
        echo "üîç Validating wrangler.toml configuration..."
        
        # Ê£ÄÊü•ÊòØÂê¶ËøòÊúâÂç†‰ΩçÁ¨¶
        if grep -q "PLACEHOLDER_KV_ID" wrangler.toml; then
          echo "‚ùå Found unreplaced PLACEHOLDER_KV_ID in wrangler.toml"
          cat wrangler.toml
          exit 1
        fi
        
        if grep -q "PLACEHOLDER_KV_PREVIEW_ID" wrangler.toml; then
          echo "‚ùå Found unreplaced PLACEHOLDER_KV_PREVIEW_ID in wrangler.toml"
          cat wrangler.toml
          exit 1
        fi
        
        echo "‚úÖ wrangler.toml validation passed"

    - name: Set up Secrets
      run: |
        echo "üîê Setting up Cloudflare Workers secrets..."
        
        # ËÆæÁΩÆÊ∞∏‰πÖÂØÜÁ†ÅÔºàÂ¶ÇÊûúÊèê‰æõÔºâ
        if [[ -n "${{ secrets.PERMANENT_PASSWORD }}" ]]; then
          echo "Setting PERMANENT_PASSWORD secret..."
          echo "${{ secrets.PERMANENT_PASSWORD }}" | wrangler secret put PERMANENT_PASSWORD
          echo "‚úÖ PERMANENT_PASSWORD secret set"
        else
          echo "‚ÑπÔ∏è No PERMANENT_PASSWORD provided, using default"
        fi
      env:
        CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
        CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}

    - name: Deploy to Cloudflare Workers
      run: |
        # Ê£ÄÊü•ÊòØÂê¶ÈúÄË¶ÅÊâãÂä®ËÆæÁΩÆ
        if [[ "${{ steps.create_kv.outputs.kv_id }}" == "MANUAL_SETUP_REQUIRED" ]]; then
          echo "‚è≠Ô∏è Skipping deployment - manual setup required"
          echo "Please complete the manual setup steps and then deploy manually"
          exit 0
        fi
        
        echo "üöÄ Deploying to Cloudflare Workers..."
        wrangler deploy
        echo "‚úÖ Deployment completed successfully!"
      env:
        CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
        CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}

    - name: Get deployment info
      run: |
        echo "üìã Deployment Information:"
        echo "- R2 Bucket: $R2_BUCKET_NAME"
        echo "- R2 Preview Bucket: $R2_PREVIEW_BUCKET_NAME"
        echo "- KV Namespace: $KV_NAMESPACE_NAME"
        echo "- KV ID: ${{ steps.create_kv.outputs.kv_id }}"
        echo "- KV Preview ID: ${{ steps.create_kv.outputs.kv_preview_id }}"
        
        echo ""
        echo "üåê Your FileCodeBox is now deployed!"
        echo "Visit your Cloudflare Workers dashboard to get the deployment URL."